openapi: 3.0.1
info:
  title: TODO App
  description: TODO Service offers CRUD operations on managing TODO items. You can add, list, update via various endpoints exposed.
  termsOfService: http://swagger.io/terms/
  contact:
    email: gargnipungarg@gmail.com
  version: 1.0.0
externalDocs:
  description: Repository
  url: https://github.com/gargnipungarg/todo-app
servers:
  - url: https://localhost/todoservicev1/todos
  - url: http://localhost/todoservicev1/todos
tags:
  - name: user
    description: Nipun
  - name: project
    description: TODO API
paths:
  /add:
    post:
      tags:
        - postItem
      summary: Add a new todo item
      description: Add a new todo item
      operationId: postItem
      requestBody:
        description: TODO Item Model
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoAddItemRequest'
        required: true
      responses:
        202:
          description: Accepted
          content: {}
        400:
          description: Bad request
          content: {}
      x-codegen-request-body-name: body
  /updateDesc:
    post:
      tags:
        - updateDesc
      summary: Update description of an item
      description: Update description of an item
      operationId: updateDesc
      requestBody:
        description: Update description of an item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoUpdateDescRequest'
        required: true
      responses:
        200:
          description: Ok
          content: {}
        400:
          description: Bad request
          content: {}
      x-codegen-request-body-name: body
  /markDone:
    post:
      tags:
        - markDone
      summary: Mark done to an item
      description: Mark done to an item
      operationId: markDone
      parameters:
        - name: id
          in: query
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Ok
          content: {}
        400:
          description: Bad request
          content: {}
  /markNotDone:
    post:
      tags:
        - markNotDone
      summary: Mark not done to an item
      description: Mark not done to an item
      operationId: markNotDone
      parameters:
        - name: id
          in: query
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Ok
          content: {}
        400:
          description: Bad request
          content: {}
  /:
    get:
      tags:
        - getTODO
      summary: Get details of an item
      description: Get details of an item
      operationId: getTODO
      parameters:
        - name: id
          in: query
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TODOEntity'
        400:
          description: Bad request
          content: {}
  /list:
    get:
      tags:
        - list
      summary: List of all items or with filter of status of not done
      description: List of all items or with filter of status of not done
      operationId: list
      parameters:
        - name: notDone
          in: query
          description: notDone flag for not done filter of statuses
          schema:
            type: boolean
      responses:
        200:
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTodoEntity'
        400:
          description: Bad request
          content: {}
components:
  schemas:
    ListTodoEntity:
      type: array
      items:
        $ref: '#/components/schemas/TODOEntity'
    TodoAddItemRequest:
      type: object
      properties:
        description:
          type: string
        dueDate:
          type: string
          format: date-time
    TodoUpdateDescRequest:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int64
    TODOEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        status:
          type: string
          description: "Status can be - Done, Not done, and Past Due"
          enum:
            - "Past Due"
            - "Done"
            - "Not Done"
        dueDate:
          type: string
          format: date-time
        creationDate:
          type: string
          format: date-time
        completionDate:
          type: string
          format: date-time
